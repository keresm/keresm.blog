{"version":3,"file":"static_js_components_PeopleMap_vue.js","mappings":";;;;;;;;;;;;;;;;AAAwF;AAC3B;AACL;;;AAGxD;AACA,CAA6F;AAC7F,gBAAgB,uGAAU;AAC1B,EAAE,+EAAM;AACR,EAAE,iFAAM;AACR,EAAE,0FAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACA,iEAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBgB;;AAE8D;;AAE7F,iEAAe;AACf;AACA;AACA,cAAc;AACd,4BAA4B;AAC5B,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;AC5I6H,CAAC,iEAAe,uIAAG,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEAnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,YAAY,uBAAuB;AACnC,KAAK;AACL;AACA,mCAAmC,SAAS,yBAAyB;AACrE;AACA,kCAAkC,SAAS,yBAAyB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://Club/./static/js/components/PeopleMap.vue","webpack://Club/static/js/components/PeopleMap.vue","webpack://Club/./static/js/components/PeopleMap.vue?2145","webpack://Club/./static/js/components/PeopleMap.vue?3cc9","webpack://Club/./static/js/components/PeopleMap.vue?62b2"],"sourcesContent":["import { render, staticRenderFns } from \"./PeopleMap.vue?vue&type=template&id=4ad2e967&\"\nimport script from \"./PeopleMap.vue?vue&type=script&lang=js&\"\nexport * from \"./PeopleMap.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/app/frontend/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4ad2e967')) {\n      api.createRecord('4ad2e967', component.options)\n    } else {\n      api.reload('4ad2e967', component.options)\n    }\n    module.hot.accept(\"./PeopleMap.vue?vue&type=template&id=4ad2e967&\", function () {\n      api.rerender('4ad2e967', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"static/js/components/PeopleMap.vue\"\nexport default component.exports","<template>\n    <MglMap\n        :accessToken=\"accessToken\"\n        :mapStyle=\"mapStyle\"\n        :maxZoom=\"12\"\n        :attributionControl=\"false\"\n        :scrollZoom=\"false\"\n        @load=\"onMapLoaded\"\n    >\n        <MglNavigationControl position=\"top-right\" />\n        <MglGeolocateControl position=\"top-right\" />\n        <slot></slot>\n    </MglMap>\n</template>\n\n<script>\nimport Mapbox from \"mapbox-gl\";\n\nimport { MglMap, MglNavigationControl, MglGeolocateControl, MglMarker } from \"vue-mapbox-ho\";\n\nexport default {\n    name: \"PeopleMap\",\n    components: {\n        MglMap,\n        MglNavigationControl,\n        MglGeolocateControl,\n        MglMarker,\n    },\n    props: {\n        geojson: {\n            type: Object,\n            required: true,\n        },\n    },\n    data() {\n        return {\n            accessToken: \"pk.eyJ1IjoidmFzM2siLCJhIjoiY2thZ254NXVwMDhkbjJ5dDk5eGh5Y21wbyJ9.wYXG58PrErQfRHTflvdSfA\",\n            mapStyle: \"mapbox://styles/vas3k/ckagmhzm90tkd1inu8pg76p9s/draft\",\n            coordinates: [18.3, 51.06],\n            defaultAvatar: \"https://i.vas3k.club/v.png\",\n        };\n    },\n    created() {\n        this.mapbox = Mapbox;\n    },\n    methods: {\n        onMapLoaded(event) {\n            const map = event.map;\n            const geojson = this.geojson;\n            const defaultAvatar = this.defaultAvatar;\n            const mapbox = this.mapbox;\n            map.addSource(\"usersGeojson\", {\n                type: \"geojson\",\n                data: this.geojson,\n                cluster: true,\n                clusterRadius: 25,\n            });\n            map.addLayer({\n                id: \"users\",\n                type: \"circle\",\n                source: \"usersGeojson\",\n                filter: [\"!=\", \"cluster\", true],\n                paint: {\n                    \"circle-opacity\": 0.0,\n                },\n            });\n\n            let markers = {};\n            let markersOnScreen = {};\n\n            function updateMarkers() {\n                let newMarkers = {};\n                let features = map.querySourceFeatures(\"usersGeojson\");\n\n                for (let i = 0; i < features.length; i++) {\n                    const coords = features[i].geometry.coordinates;\n                    const props = features[i].properties;\n                    const id = props.cluster_id || props.id;\n\n                    let marker = markers[id];\n                    if (!marker) {\n                        if (props.cluster) {\n                            // it's a cluster\n                            let clusterElement = document.createElement(\"div\");\n                            clusterElement.classList.add(\"people-map-user-cluster\");\n                            clusterElement.innerText = props.point_count;\n                            const clusterAvatar = getClusterAvatar(coords);\n                            clusterElement.style.backgroundImage = \"url('\" + avatarOrDefault(clusterAvatar) + \"')\";\n                            marker = new mapbox.Marker({ element: clusterElement }).setLngLat(coords);\n                            clusterElement.addEventListener(\"click\", function () {\n                                map.flyTo({ center: coords, zoom: map.getZoom() + 2, offset: [200, 0] });\n                            });\n                        } else {\n                            // it's a normal marker\n                            let markerElement = document.createElement(\"a\");\n                            markerElement.href = props.url;\n                            markerElement.target = \"_blank\";\n                            markerElement.classList.add(\"people-map-user-marker\");\n                            markerElement.style.backgroundImage = \"url('\" + avatarOrDefault(props.avatar) + \"')\";\n                            marker = new mapbox.Marker({ element: markerElement }).setLngLat(coords);\n                        }\n                    }\n                    newMarkers[id] = marker;\n                    markers[id] = marker;\n\n                    if (!markersOnScreen[id]) marker.addTo(map);\n                }\n\n                // remove old markers from map\n                for (let id in markersOnScreen) {\n                    if (!newMarkers[id]) markersOnScreen[id].remove();\n                }\n                markersOnScreen = newMarkers;\n            }\n\n            function getClusterAvatar(coordinates) {\n                let pointPixels = map.project(coordinates);\n                const avatarFeature = geojson.features.find(function (el) {\n                    if (!el.properties.avatar || el.properties.avatar === \"null\") return;\n                    let elPixels = map.project(el.geometry.coordinates);\n                    let pixelDistance = Math.sqrt(\n                        Math.pow(elPixels.x - pointPixels.x, 2) + Math.pow(elPixels.y - pointPixels.y, 2)\n                    );\n                    return Math.abs(pixelDistance) <= 20;\n                });\n                return avatarFeature ? avatarFeature.properties.avatar : defaultAvatar;\n            }\n\n            function avatarOrDefault(avatar) {\n                return avatar && avatar !== \"null\" ? avatar : defaultAvatar;\n            }\n\n            map.on(\"data\", function (e) {\n                if (e.sourceId !== \"usersGeojson\" || !e.isSourceLoaded) return;\n                map.on(\"move\", updateMarkers);\n                map.on(\"moveend\", updateMarkers);\n                updateMarkers();\n            });\n        },\n    },\n};\n</script>\n","import mod from \"-!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PeopleMap.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PeopleMap.vue?vue&type=script&lang=js&\"","export * from \"-!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PeopleMap.vue?vue&type=template&id=4ad2e967&\"","var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"MglMap\",\n    {\n      attrs: {\n        accessToken: _vm.accessToken,\n        mapStyle: _vm.mapStyle,\n        maxZoom: 12,\n        attributionControl: false,\n        scrollZoom: false,\n      },\n      on: { load: _vm.onMapLoaded },\n    },\n    [\n      _c(\"MglNavigationControl\", { attrs: { position: \"top-right\" } }),\n      _vm._v(\" \"),\n      _c(\"MglGeolocateControl\", { attrs: { position: \"top-right\" } }),\n      _vm._v(\" \"),\n      _vm._t(\"default\"),\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"names":[],"sourceRoot":""}